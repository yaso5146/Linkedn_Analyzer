# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/ptyp',
                'doc_host': 'https://dsm-72.github.io',
                'git_url': 'https://github.com/dsm-72/ptyp',
                'lib_path': 'ptyp'},
  'syms': { 'ptyp.atyp': {},
            'ptyp.cons': { 'ptyp.cons.ProtocolMethod': ('cons.html#protocolmethod', 'ptyp/cons.py'),
                           'ptyp.cons.ProtocolMethod._missing_': ('cons.html#protocolmethod._missing_', 'ptyp/cons.py'),
                           'ptyp.cons.ProtocolMethod.casefold': ('cons.html#protocolmethod.casefold', 'ptyp/cons.py'),
                           'ptyp.cons.ProtocolMethod.gidt': ('cons.html#protocolmethod.gidt', 'ptyp/cons.py'),
                           'ptyp.cons.ProtocolMethod.idgt': ('cons.html#protocolmethod.idgt', 'ptyp/cons.py'),
                           'ptyp.cons.ProtocolMethod.ieq': ('cons.html#protocolmethod.ieq', 'ptyp/cons.py'),
                           'ptyp.cons.ProtocolMethod.startswith': ('cons.html#protocolmethod.startswith', 'ptyp/cons.py'),
                           'ptyp.cons.ProtocolMethodOrder': ('cons.html#protocolmethodorder', 'ptyp/cons.py'),
                           'ptyp.cons.synonyms': ('cons.html#synonyms', 'ptyp/cons.py'),
                           'ptyp.cons.synonyms.__eq__': ('cons.html#synonyms.__eq__', 'ptyp/cons.py'),
                           'ptyp.cons.synonyms.__hash__': ('cons.html#synonyms.__hash__', 'ptyp/cons.py'),
                           'ptyp.cons.synonyms.__new__': ('cons.html#synonyms.__new__', 'ptyp/cons.py'),
                           'ptyp.cons.synonyms.__repr__': ('cons.html#synonyms.__repr__', 'ptyp/cons.py'),
                           'ptyp.cons.synonyms.__str__': ('cons.html#synonyms.__str__', 'ptyp/cons.py'),
                           'ptyp.cons.synonyms.startswith': ('cons.html#synonyms.startswith', 'ptyp/cons.py'),
                           'ptyp.cons.synonyms.strs': ('cons.html#synonyms.strs', 'ptyp/cons.py')},
            'ptyp.duck': { 'ptyp.duck.Hashable': ('duck.html#hashable', 'ptyp/duck.py'),
                           'ptyp.duck.Hashable.__hash__': ('duck.html#hashable.__hash__', 'ptyp/duck.py'),
                           'ptyp.duck.Hashable.__instancecheck__': ('duck.html#hashable.__instancecheck__', 'ptyp/duck.py'),
                           'ptyp.duck.NonStrBytesIterable': ('duck.html#nonstrbytesiterable', 'ptyp/duck.py'),
                           'ptyp.duck.NonStrBytesIterable.__instancecheck__': ( 'duck.html#nonstrbytesiterable.__instancecheck__',
                                                                                'ptyp/duck.py'),
                           'ptyp.duck.NonStrBytesIterable.__iter__': ('duck.html#nonstrbytesiterable.__iter__', 'ptyp/duck.py'),
                           'ptyp.duck.NotSpecial': ('duck.html#notspecial', 'ptyp/duck.py'),
                           'ptyp.duck.NotSpecial.__hash__': ('duck.html#notspecial.__hash__', 'ptyp/duck.py'),
                           'ptyp.duck.NotSpecial.__instancecheck__': ('duck.html#notspecial.__instancecheck__', 'ptyp/duck.py'),
                           'ptyp.duck._acczeros': ('duck.html#_acczeros', 'ptyp/duck.py'),
                           'ptyp.duck._format_list': ('duck.html#_format_list', 'ptyp/duck.py'),
                           'ptyp.duck._genzeros': ('duck.html#_genzeros', 'ptyp/duck.py'),
                           'ptyp.duck._shape': ('duck.html#_shape', 'ptyp/duck.py'),
                           'ptyp.duck.empty': ('duck.html#empty', 'ptyp/duck.py'),
                           'ptyp.duck.empty.__init__': ('duck.html#empty.__init__', 'ptyp/duck.py'),
                           'ptyp.duck.empty.__repr__': ('duck.html#empty.__repr__', 'ptyp/duck.py'),
                           'ptyp.duck.empty.ndim': ('duck.html#empty.ndim', 'ptyp/duck.py')},
            'ptyp.grds': { 'ptyp.grds.isalias': ('grds.html#isalias', 'ptyp/grds.py'),
                           'ptyp.grds.isallsame': ('grds.html#isallsame', 'ptyp/grds.py'),
                           'ptyp.grds.isargs': ('grds.html#isargs', 'ptyp/grds.py'),
                           'ptyp.grds.iscls': ('grds.html#iscls', 'ptyp/grds.py'),
                           'ptyp.grds.isdict': ('grds.html#isdict', 'ptyp/grds.py'),
                           'ptyp.grds.isdunder': ('grds.html#isdunder', 'ptyp/grds.py'),
                           'ptyp.grds.ishashable': ('grds.html#ishashable', 'ptyp/grds.py'),
                           'ptyp.grds.isiter': ('grds.html#isiter', 'ptyp/grds.py'),
                           'ptyp.grds.isnan': ('grds.html#isnan', 'ptyp/grds.py'),
                           'ptyp.grds.isnotiterstr': ('grds.html#isnotiterstr', 'ptyp/grds.py'),
                           'ptyp.grds.isnotspecial': ('grds.html#isnotspecial', 'ptyp/grds.py'),
                           'ptyp.grds.isorigin': ('grds.html#isorigin', 'ptyp/grds.py'),
                           'ptyp.grds.isprivate': ('grds.html#isprivate', 'ptyp/grds.py'),
                           'ptyp.grds.isstr': ('grds.html#isstr', 'ptyp/grds.py'),
                           'ptyp.grds.istuple': ('grds.html#istuple', 'ptyp/grds.py'),
                           'ptyp.grds.istype': ('grds.html#istype', 'ptyp/grds.py'),
                           'ptyp.grds.istyping': ('grds.html#istyping', 'ptyp/grds.py'),
                           'ptyp.grds.notcls': ('grds.html#notcls', 'ptyp/grds.py')},
            'ptyp.meta': { 'ptyp.meta.Alias': ('meta.html#alias', 'ptyp/meta.py'),
                           'ptyp.meta.AliasMeta': ('meta.html#aliasmeta', 'ptyp/meta.py'),
                           'ptyp.meta.AliasMeta.getbtype': ('meta.html#aliasmeta.getbtype', 'ptyp/meta.py'),
                           'ptyp.meta.Not': ('meta.html#not', 'ptyp/meta.py'),
                           'ptyp.meta.NotMeta': ('meta.html#notmeta', 'ptyp/meta.py'),
                           'ptyp.meta.NotMeta.check': ('meta.html#notmeta.check', 'ptyp/meta.py'),
                           'ptyp.meta.NotMeta.default_kwds': ('meta.html#notmeta.default_kwds', 'ptyp/meta.py'),
                           'ptyp.meta.NotMeta.getbtype': ('meta.html#notmeta.getbtype', 'ptyp/meta.py'),
                           'ptyp.meta.Opt': ('meta.html#opt', 'ptyp/meta.py'),
                           'ptyp.meta.OptionalMeta': ('meta.html#optionalmeta', 'ptyp/meta.py'),
                           'ptyp.meta.OptionalMeta.__new__': ('meta.html#optionalmeta.__new__', 'ptyp/meta.py'),
                           'ptyp.meta.OptionalMeta.default_kwds': ('meta.html#optionalmeta.default_kwds', 'ptyp/meta.py'),
                           'ptyp.meta.OptionalMeta.getbtype': ('meta.html#optionalmeta.getbtype', 'ptyp/meta.py'),
                           'ptyp.meta.ProtoType': ('meta.html#prototype', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta': ('meta.html#protocolbasemeta', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.__call__': ('meta.html#protocolbasemeta.__call__', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.__init_subclass__': ('meta.html#protocolbasemeta.__init_subclass__', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.__instancecheck__': ('meta.html#protocolbasemeta.__instancecheck__', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.__new__': ('meta.html#protocolbasemeta.__new__', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.check': ('meta.html#protocolbasemeta.check', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.classname': ('meta.html#protocolbasemeta.classname', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.default_kwds': ('meta.html#protocolbasemeta.default_kwds', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.getallattrs': ('meta.html#protocolbasemeta.getallattrs', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.getattrs': ('meta.html#protocolbasemeta.getattrs', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.getbtype': ('meta.html#protocolbasemeta.getbtype', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.getguards': ('meta.html#protocolbasemeta.getguards', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.gethasattrs': ('meta.html#protocolbasemeta.gethasattrs', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.getmapattrs': ('meta.html#protocolbasemeta.getmapattrs', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.getqualname': ('meta.html#protocolbasemeta.getqualname', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.gettypes': ('meta.html#protocolbasemeta.gettypes', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.makebases': ('meta.html#protocolbasemeta.makebases', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.makeguard': ('meta.html#protocolbasemeta.makeguard', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.metadict': ('meta.html#protocolbasemeta.metadict', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.qualname': ('meta.html#protocolbasemeta.qualname', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.setallattrs': ('meta.html#protocolbasemeta.setallattrs', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.setattrs': ('meta.html#protocolbasemeta.setattrs', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.setbtype': ('meta.html#protocolbasemeta.setbtype', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.setguards': ('meta.html#protocolbasemeta.setguards', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.sethasattrs': ('meta.html#protocolbasemeta.sethasattrs', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.setmapattrs': ('meta.html#protocolbasemeta.setmapattrs', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.setqualname': ('meta.html#protocolbasemeta.setqualname', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolBaseMeta.settypes': ('meta.html#protocolbasemeta.settypes', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolMeta': ('meta.html#protocolmeta', 'ptyp/meta.py'),
                           'ptyp.meta.ProtocolMeta.getbtype': ('meta.html#protocolmeta.getbtype', 'ptyp/meta.py')},
            'ptyp.prot': { 'ptyp.prot.Alias': ('prot.html#alias', 'ptyp/prot.py'),
                           'ptyp.prot.AliasMeta': ('prot.html#aliasmeta', 'ptyp/prot.py'),
                           'ptyp.prot.AliasMeta.getbtype': ('prot.html#aliasmeta.getbtype', 'ptyp/prot.py'),
                           'ptyp.prot.Not': ('prot.html#not', 'ptyp/prot.py'),
                           'ptyp.prot.NotMeta': ('prot.html#notmeta', 'ptyp/prot.py'),
                           'ptyp.prot.NotMeta.default_kwds': ('prot.html#notmeta.default_kwds', 'ptyp/prot.py'),
                           'ptyp.prot.NotMeta.getbtype': ('prot.html#notmeta.getbtype', 'ptyp/prot.py'),
                           'ptyp.prot.NotMeta.guard': ('prot.html#notmeta.guard', 'ptyp/prot.py'),
                           'ptyp.prot.Opt': ('prot.html#opt', 'ptyp/prot.py'),
                           'ptyp.prot.OptionalMeta': ('prot.html#optionalmeta', 'ptyp/prot.py'),
                           'ptyp.prot.OptionalMeta.__new__': ('prot.html#optionalmeta.__new__', 'ptyp/prot.py'),
                           'ptyp.prot.OptionalMeta.default_kwds': ('prot.html#optionalmeta.default_kwds', 'ptyp/prot.py'),
                           'ptyp.prot.OptionalMeta.getbtype': ('prot.html#optionalmeta.getbtype', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta': ('prot.html#protocolbasemeta', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__call__': ('prot.html#protocolbasemeta.__call__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__eq__': ('prot.html#protocolbasemeta.__eq__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__hash__': ('prot.html#protocolbasemeta.__hash__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__init__': ('prot.html#protocolbasemeta.__init__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__init_subclass__': ('prot.html#protocolbasemeta.__init_subclass__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__instancecheck__': ('prot.html#protocolbasemeta.__instancecheck__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__instanceguard__': ('prot.html#protocolbasemeta.__instanceguard__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__invert__': ('prot.html#protocolbasemeta.__invert__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__invopt__': ('prot.html#protocolbasemeta.__invopt__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__new__': ('prot.html#protocolbasemeta.__new__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__not__': ('prot.html#protocolbasemeta.__not__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.__redirect__': ('prot.html#protocolbasemeta.__redirect__', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.check': ('prot.html#protocolbasemeta.check', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.construct': ('prot.html#protocolbasemeta.construct', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.default_kwds': ('prot.html#protocolbasemeta.default_kwds', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.getbtype': ('prot.html#protocolbasemeta.getbtype', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.guard': ('prot.html#protocolbasemeta.guard', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.makebases': ('prot.html#protocolbasemeta.makebases', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.new': ('prot.html#protocolbasemeta.new', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.setqualname': ('prot.html#protocolbasemeta.setqualname', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolBaseMeta.typeguard': ('prot.html#protocolbasemeta.typeguard', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolMeta': ('prot.html#protocolmeta', 'ptyp/prot.py'),
                           'ptyp.prot.ProtocolMeta.getbtype': ('prot.html#protocolmeta.getbtype', 'ptyp/prot.py'),
                           'ptyp.prot.Prototype': ('prot.html#prototype', 'ptyp/prot.py'),
                           'ptyp.prot.PrototypeMeta': ('prot.html#prototypemeta', 'ptyp/prot.py'),
                           'ptyp.prot.PrototypeMeta.__hash__': ('prot.html#prototypemeta.__hash__', 'ptyp/prot.py'),
                           'ptyp.prot.PrototypeMeta.__new__': ('prot.html#prototypemeta.__new__', 'ptyp/prot.py'),
                           'ptyp.prot.PrototypeMeta.getbtype': ('prot.html#prototypemeta.getbtype', 'ptyp/prot.py')},
            'ptyp.ptyp': { 'ptyp.ptyp.IntQ': ('ptyp.html#intq', 'ptyp/ptyp.py'),
                           'ptyp.ptyp.NotStrBytes': ('ptyp.html#notstrbytes', 'ptyp/ptyp.py'),
                           'ptyp.ptyp.StrBytes': ('ptyp.html#strbytes', 'ptyp/ptyp.py'),
                           'ptyp.ptyp.StrQ': ('ptyp.html#strq', 'ptyp/ptyp.py')},
            'ptyp.type': {},
            'ptyp.util': { 'ptyp.util.argname': ('util.html#argname', 'ptyp/util.py'),
                           'ptyp.util.argsname': ('util.html#argsname', 'ptyp/util.py'),
                           'ptyp.util.classname': ('util.html#classname', 'ptyp/util.py'),
                           'ptyp.util.filtkwds': ('util.html#filtkwds', 'ptyp/util.py'),
                           'ptyp.util.getname': ('util.html#getname', 'ptyp/util.py'),
                           'ptyp.util.getorigintypes': ('util.html#getorigintypes', 'ptyp/util.py'),
                           'ptyp.util.guardtype': ('util.html#guardtype', 'ptyp/util.py'),
                           'ptyp.util.opttypes': ('util.html#opttypes', 'ptyp/util.py'),
                           'ptyp.util.qualname': ('util.html#qualname', 'ptyp/util.py'),
                           'ptyp.util.unionify': ('util.html#unionify', 'ptyp/util.py')}}}
