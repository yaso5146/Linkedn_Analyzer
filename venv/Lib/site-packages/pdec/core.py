# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Property', 'slotprops', 'props']

# %% ../nbs/00_core.ipynb 6
from functools import wraps

# %% ../nbs/00_core.ipynb 8
from types import (NoneType,)
from typing import (Any, Self, Callable, Optional, NamedTuple,)

# %% ../nbs/00_core.ipynb 10
#| export


# %% ../nbs/00_core.ipynb 12
from nchr import U1
from nlit import __DOC__, __NAME__, __PROPS__

# %% ../nbs/00_core.ipynb 14
class Property(NamedTuple):
    '''A class representing a property in an object.

    Attributes
    ----------
    key : str
        The key name of the property.
        
    ann : Any, default: NoneType
        The annotation type of the property.
        
    val : Any, optional
        The default value of the property.
        
    doc : str, optional
        The documentation string for the property.
        
    gen : Callable[[Self], Any], optional
        A generator function for the property value.
        
    bad : Any, optional
        A value indicating an invalid or bad state for the property
        permitting the value to be set.

    Methods
    -------
    make() -> property
        Create and return a property object with the specified attributes.
        
    getdef(o: object) -> Any
        Get the default value of the property for a given object.
        
    getkws(o: object, **kwargs) -> Any
        Get the property value from keyword arguments or the object.
    '''
    key: str
    '''The name of the property.''';
    
    ann: Any = NoneType
    '''The annotation type of the property.''';
    
    val: Any = None
    '''The default value of the property.''';
    
    doc: Optional[str] = None
    '''The documentation string for the property.''';
    
    gen: Optional[Callable[[Self], Any]] = None
    '''A generator function for the property value.''';
    
    bad: Any = None
    '''A value indicating an invalid or bad state for the property permitting the value to be set.''';
    
    @property
    def prv(self: Self) -> str:
        '''The private name of the property.'''
        return f'{U1}{self.key}'
    
    def __str__(self: Self) -> str:
        return self.prv
    
    def __repr__(self: Self) -> str:
        astr = getattr(self.ann, __NAME__, self.ann)
        return f'{self.key}: {astr} (default: {self.val})'
    
    def make(self: Self) -> property:
        '''Create and return a property object with the specified attributes.'''
        key, ann, val, doc, gen, bad, prv = *self, self.prv 
        
        @property
        def prop(self: Self) -> ann:
            f'''Property accessor for {key}.'''
            # whether the property has been set
            hasp = hasattr(self, prv)
            
            # the value of the property / default value
            pval = getattr(self, prv, val)
            
            # if property is not set or the value is bad, set it
            if not hasp or pval is bad:
                try: 
                    setattr(self, prv, gen(self))
                except: 
                    setattr(self, prv, val)
                    
            return getattr(self, prv, val)

        @prop.setter
        def prop(self: Self, val: ann) -> Self:
            if val is bad:
                try: 
                    val = gen(self)
                except: 
                    ...
            setattr(self, prv, val)
            return self
        
        setattr(prop, __DOC__, doc)
        return prop
    
    def getdef(self: Self, o: object):
        '''Get the default value of the property for a given object.'''
        return getattr(o, self.prv, self.val)
    
    def getkws(self: Self, o: object, **kwargs):
        '''Get the property value from keyword arguments or the object.'''
        return kwargs.get(self.key, self.getdef(o))


# %% ../nbs/00_core.ipynb 16
def slotprops(props: dict[str, Property] = dict()):
    '''A decorator for adding properties to a class based on the `Property` class.

    Parameters
    ----------
    props : dict[str, Property], optional
        A dictionary of property names and their corresponding `Property` class instances.
        
    Returns
    -------
    callable
        A decorator function that adds the specified properties to a class.
    '''
    @classmethod
    def getprops(
        cls: type, 
        *args, 
        __self: Optional[Any] = None, 
        __class: Optional[type] = None, 
        **kwargs
    ) -> dict:
        '''Class method to get the properties of the class.

        This method is attached to the decorated class and can be used to retrieve 
        the values of the properties defined in the class.

        Parameters
        ----------
        *args
            Variable length argument list.
            
        __self : Any, optional
            An instance of the class.
            
        __class : type, optional
            The class itself.
            
        **kwargs
            Arbitrary keyword arguments.

        Returns
        -------
        dict
            A dictionary mapping the property names to their values.
        '''
        obj = __self  
        kls = cls if __class is None else __class if obj is None else type(obj)
        pvals: dict[str, Property] = getattr(kls, __PROPS__, dict())
        pdict = dict()
        for prop in pvals.values():
            sval = prop.getkws(obj, **kwargs)
            cval = prop.getkws(kls, **kwargs)
            pdict[prop.key] = sval if sval is not None else cval
        return pdict  
        # return {prop.key: prop.getkws(cls, **kwargs) for prop in getattr(cls, __PROPS__, dict()).values()}
    
    def decorator(cls: type) -> type:
        '''The actual decorator function that modifies the class.

        It adds the specified properties to the class and attaches the `getprops` method to it.

        Parameters
        ----------
        cls : type
            The class to be decorated.

        Returns
        -------
        type
            The decorated class with added properties and the `getprops` method.
        '''
        prevs = getattr(cls, __PROPS__, dict())
        setattr(cls, __PROPS__, {**prevs, **props})
        for name, prop in props.items():
            setattr(cls, name, prop.make())
        setattr(cls, 'getprops', getprops)
        return cls
    return decorator

@wraps(slotprops)
def props(*args, **kwargs):
    '''An alias for the `slotprops` decorator.
    
    See Also
    --------
    slotprops : A decorator for adding properties to a class based on the `Property` class.
    '''
    return slotprops(*args, **kwargs)

