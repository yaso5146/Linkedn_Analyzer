# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['P', 'VArgs', 'last', 'fallback', 'filtdict', 'dict1st', 'iter1st', 'flag1st', 'key1st', 'val1st', 'idx1st', 'arg1st']

# %% ../nbs/00_core.ipynb 6
#| export


# %% ../nbs/00_core.ipynb 8
from typing import Any, Union, Iterable, TypeAlias, ParamSpec

# %% ../nbs/00_core.ipynb 10
#| export


# %% ../nbs/00_core.ipynb 12
from atyp import AnyQ, IntQ, BoolFunc
from chck import isdict, notnone
from atup import pack, argtup

# %% ../nbs/00_core.ipynb 14
#| export


# %% ../nbs/00_core.ipynb 16
P = ParamSpec('P')
VArgs: TypeAlias = Union[Any, tuple]

# %% ../nbs/00_core.ipynb 17
def last(*args: VArgs): return next(reversed(argtup(args)), None)

def fallback(vals: Iterable, default = None, uselast: bool = True):
    '''Fallback to the last value of `vals` if `default is None` and `uselast` is `True`'''
    return default if notnone(default) else last(vals) if uselast else None

# %% ../nbs/00_core.ipynb 18
def filtdict(dct: dict, keys: list = None) -> dict:
    '''Return a dict with only the keys in `keys`'''
    return {k: v for k in (keys or dct.keys()) if (v := dct.get(k))}

# %% ../nbs/00_core.ipynb 19
def dict1st(dct: dict, flag: BoolFunc = notnone, keys: list = None):
    for idx, key in enumerate((keys or dct.keys())):
        if (val := dct.get(key)) and flag(val): return idx, key, val
            
def iter1st(arr: list, flag: BoolFunc = notnone):
    for idx, val in enumerate(arr):
        if flag(val): return idx, val
    
def flag1st(itr: Union[list, dict], flag: BoolFunc = notnone, keys: list = None):
    if isdict(itr): return pack(dict1st(itr, flag, keys), n=3)
    else: return pack(iter1st(itr, flag), n=2)

def key1st(dct: dict, keys: list = None, flag: BoolFunc = notnone, default: AnyQ = None, uselast: bool = True):    
    _, key, _ = flag1st(dct := filtdict(dct, keys), flag, keys)
    if notnone(key): return key
    return fallback(dct.keys(), default, uselast)

def val1st(dct: dict, keys: list = None, flag: BoolFunc = notnone, default: AnyQ = None, uselast: bool = True):    
    *_, val = flag1st(dct := filtdict(dct, keys), flag, keys)
    if notnone(val): return val
    return fallback(dct.values(), default, uselast)

def idx1st(*args, flag: BoolFunc = notnone, default: IntQ = None, uselast: bool = True):
    idx, *_ = flag1st(args, flag)
    if notnone(idx): return idx    
    return fallback(tuple(range(len(args))), default, uselast)

def arg1st(*args, flag: BoolFunc = notnone, default: AnyQ = None, uselast: bool = True):
    *_, val = flag1st(args, flag)
    if notnone(val): return val
    return fallback(args, default, uselast)
