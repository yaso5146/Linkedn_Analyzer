# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_tgrd.ipynb.

# %% auto 0
__all__ = ['isof', 'isinst', 'isoptional', 'optq', 'isopt', 'istypeq', 'isinstq']

# %% ../nbs/03_tgrd.ipynb 4
#| export

# %% ../nbs/03_tgrd.ipynb 5
from types import NoneType
from typing import TypeGuard
from typing import Tuple, Union

# %% ../nbs/03_tgrd.ipynb 6
from .atyp import G, TypeLike
from .core import isnone

# %% ../nbs/03_tgrd.ipynb 9
def isof(x: G, *t: Tuple[TypeLike, ...]) -> TypeGuard[TypeLike]:
    '''Alias for `isinstance`
    
    See Also
    --------
    isinstance : Check if an object is of a certain type
    isinst: Alias for `isinstance`
    '''
    return isinstance(x, t)

def isinst(x: G, *t: TypeLike) -> TypeGuard[G]:
    '''Alias for `isinstance`
    
    See Also
    --------
    isinstance : Check if an object is of a certain type
    isof: Alias for `isinstance`
    '''
    return isinstance(x, t)

# %% ../nbs/03_tgrd.ipynb 11
def isoptional(x: G, *t: TypeLike) -> TypeGuard[Union[G, None, NoneType]]:
    '''Check if `x` is optional i.e. is of type(s) `t` or None
    
    See Also
    --------
    optq: Alias for `isoptional`
    isopt: Alias for `isoptional`
    istypeq: Alias for `isoptional`
    isinstq: Alias for `isoptional`
    
    isnone: Check if an object is `None`
    '''
    return isinstance(x, t) or isnone(x) or isinstance(x, NoneType)

def optq(x: G, *t: TypeLike) -> TypeGuard[Union[G, None]]:
    '''Check if `x` is optional i.e. is of type(s) `t` or None
    
    See Also
    --------
    isoptional: Alias for `optq`
    isopt: Alias for `optq`
    istypeq: Alias for `optq`
    isinstq: Alias for `optq`
    
    isnone: Check if an object is `None`
    '''
    return isoptional(x, *t)

def isopt(x: G, *t: TypeLike) -> TypeGuard[Union[G, None]]:
    '''Check if `x` is optional i.e. is of type(s) `t` or None
    
    See Also
    --------
    optq: Alias for `isopt`
    isoptional: Alias for `isopt`
    istypeq: Alias for `isopt`
    isinstq: Alias for `isopt`
    
    isnone: Check if an object is `None`
    '''
    return isoptional(x, *t)


def istypeq(x: G, *t: TypeLike) -> TypeGuard[Union[G, NoneType]]:
    '''Check if `x` is optional i.e. is of type(s) `t` or None
    
    See Also
    --------
    optq: Alias for `istypeq`
    isopt: Alias for `istypeq`
    isoptional: Alias for `istypeq`
    isinstq: Alias for `istypeq`
    
    isnone: Check if an object is `None`
    '''
    return isoptional(x, *t)


def isinstq(x: G, *t: TypeLike) -> TypeGuard[Union[G, NoneType]]:
    '''Check if `x` is optional i.e. is of type(s) `t` or None
    
    See Also
    --------
    optq: Alias for `isinstq`
    isopt: Alias for `isinstq`
    istypeq: Alias for `isinstq`
    isoptional: Alias for `isinstq`
    
    isnone: Check if an object is `None`
    '''
    return isoptional(x, *t)
