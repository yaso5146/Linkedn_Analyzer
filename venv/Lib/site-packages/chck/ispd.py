# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/61_ispd.ipynb.

# %% auto 0
__all__ = ['ispdna', 'notpdna', 'isdelegate', 'iscataccessor', 'isdf', 'isseries', 'isidx', 'isindex', 'iscategoricalindex',
           'iscatidx', 'iscidx', 'isboolindex', 'isboolidx', 'isbidx', 'isindexlike', 'isidxlike', 'iscataccessorlike',
           'iscatacclike']

# %% ../nbs/61_ispd.ipynb 4
from typing import TypeGuard
from typing import Any, Optional

# %% ../nbs/61_ispd.ipynb 5
from quac import (
    pdna, pddelegate, pdcataccessor, 
    dataframe, pdseries, pdindex, pdcatindex, boolindex, indexlike
)
from .core import notnone
from .bool import isbool01
from .comp import anyguard

# %% ../nbs/61_ispd.ipynb 7
def ispdna(x) -> TypeGuard[pdna]:
    '''Check if `x` is `pd.NA`.'''
    return isinstance(x, pdna)

def notpdna(x) -> TypeGuard[Any]:
    '''Check if `x` is not `pd.NA`.'''
    return not ispdna(x)

# %% ../nbs/61_ispd.ipynb 8
def isdelegate(x) -> TypeGuard[pddelegate]:
    '''Check if `x` is a pandas accessor.'''
    return isinstance(x, pddelegate)

def iscataccessor(x) -> TypeGuard[pdcataccessor]:
    '''Check if `x` is a pandas accessor.'''
    return isinstance(x, pdcataccessor)

# %% ../nbs/61_ispd.ipynb 9
def isdf(x) -> TypeGuard[dataframe]:
    '''Check if `x` is an `pd.DataFrame`.'''
    return isinstance(x, dataframe)

def isseries(x) -> TypeGuard[pdseries]:
    '''Check if `x` is an `pd.Series`.'''
    return isinstance(x, pdseries)

# %% ../nbs/61_ispd.ipynb 10
def isidx(x) -> TypeGuard[pdindex]:
    '''Check if `x` is an `pd.Index`.
    
    See Also
    --------
    isindex: Alias for `isidx`.
    '''
    return isinstance(x, pdindex,)


def isindex(x) -> TypeGuard[pdindex]:
    '''Check if `x` is an `pd.Index`.
    
    See Also
    --------
    isidx: Alias for `isindex`.
    '''
    return isinstance(x, pdindex)

# %% ../nbs/61_ispd.ipynb 11
def iscategoricalindex(x) -> TypeGuard[pdcatindex]:
    '''Check if `x` is an `pd.CategoricalIndex`.    
    
    See Also
    --------
    iscatidx : Alias for `iscategoricalindex`.
    iscidx : Alias for `iscategoricalindex`.
    '''
    return isinstance(x, pdcatindex)

def iscatidx(x) -> TypeGuard[pdcatindex]:
    '''Check if `x` is an `pd.CategoricalIndex`.    
    
    See Also
    --------
    iscatidx : Alias for `iscatidx`.
    iscidx: Alias for `iscatidx`.
    '''
    return iscategoricalindex(x)

def iscidx(x) -> TypeGuard[pdcatindex]:
    '''Check if `x` is an `pd.CategoricalIndex`.    
    
    See Also
    --------
    iscatidx : Alias for `iscidx`.
    iscategoricalindex: Alias for `iscidx`.
    '''
    return iscategoricalindex(x)


def isboolindex(x, r: Optional[pdindex] = None) -> TypeGuard[boolindex]:
    '''Check if `x` is an `BoolIndex`. 

    Parameters
    ----------
    x : `Any`
        The object to check.

    r : `pd.Index`, default: None
        An optional reference index to check that `x` is the same length of.
    
    See Also
    --------
    isboolidx : Alias for `isboolindex`.
    isbidx : Alias for `isboolindex`.
    '''
    return isinstance(x, boolindex) and (len(x) == len(r) if notnone(r) else True)

def isboolidx(x, r: Optional[pdindex] = None) -> TypeGuard[boolindex]:
    '''Check if `x` is an `BoolIndex`.    

    Parameters
    ----------
    x : `Any`
        The object to check.
        
    r : `pd.Index`, default: None
        An optional reference index to check that `x` is the same length of.
    
    See Also
    --------
    isboolindex : Alias for `isboolidx`.
    isbidx: Alias for `isboolidx`.
    '''
    return isboolindex(x, r)

def isbidx(x, r: Optional[pdindex] = None) -> TypeGuard[boolindex]:
    '''Check if `x` is an `BoolIndex`.    
    Parameters
    ----------
    x : `Any`
        The object to check.
        
    r : `pd.Index`, default: None
        An optional reference index to check that `x` is the same length of.
    
    See Also
    --------
    isboolidx : Alias for `isbidx`.
    isboolindex: Alias for `isbidx`.
    '''
    return isboolindex(x, r)


def isindexlike(x) -> TypeGuard[indexlike]:
    '''Check if `x` is an `IndexLike`.    
    
    See Also
    --------
    isidxlike : Alias for `isindexlike`.
    '''
    return isinstance(x, indexlike)

def isidxlike(x) -> TypeGuard[indexlike]:
    '''Check if `x` is an `IndexLike`.    
    
    See Also
    --------
    isindexlike : Alias for `isidxlike`.
    '''
    return isindexlike(x)

# %% ../nbs/61_ispd.ipynb 12
def iscataccessorlike(x) -> TypeGuard[pdcataccessor | indexlike | pddelegate]:
    '''Check if x is like an categorical-accessor, e.g. (`CategoricalAccessor`, `Delegate`, `Index`, 
    `CategoricalIndex`, `indexlike`, `boolindex`, etc).
    
    See Also
    --------
    iscatacclike; Alias for `iscataccessorlike`
    '''
    return anyguard(x, iscataccessor, isseries, isidxlike, isdelegate)


def iscatacclike(x) -> TypeGuard[pdcataccessor | indexlike | pddelegate]:
    '''Check if x is like an categorical-accessor, e.g. (`CategoricalAccessor`, `Delegate`, `Index`, 
    `CategoricalIndex`, `indexlike`, `boolindex`, etc).
    
    See Also
    --------
    iscataccessorlike; Alias for `iscatacclike`
    '''
    return anyguard(x, iscataccessor, isseries, isidxlike, isdelegate)
