# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/32_pyty.ipynb.

# %% auto 0
__all__ = ['ismethodwrapper', 'ismthdwrap', 'isbuiltinfunctiontype', 'isbuiltin', 'isoptional']

# %% ../nbs/32_pyty.ipynb 4
from types import NoneType, MethodWrapperType, BuiltinFunctionType
from typing import TypeGuard, _UnionGenericAlias, get_args

from .atyp import T

# %% ../nbs/32_pyty.ipynb 6
def ismethodwrapper(x) -> TypeGuard[MethodWrapperType]:
    '''Check if x is of type `MethodWrapperType`.
    
    See Also
    --------
    ismthdwrap: alias for `ismethodwrapper`    
    '''
    return isinstance(x, MethodWrapperType)


def ismthdwrap(x) -> TypeGuard[MethodWrapperType]:
    '''Check if x is of type `MethodWrapperType`.
    
    See Also
    --------
    ismethodwrapper: alias for `ismethismthdwrapodwrapper`    
    '''
    return ismethodwrapper(x)

def isbuiltinfunctiontype(x) -> TypeGuard[BuiltinFunctionType]:
    '''Check if x is of type `BuiltinFunctionType`.
    
    See Also
    --------
    isbuiltin: alias for `isbuiltinfunctiontype`    
    '''
    return isinstance(x, BuiltinFunctionType)

def isbuiltin(x) -> TypeGuard[BuiltinFunctionType]:
    '''Check if x is of type `BuiltinFunctionType`.
    
    See Also
    --------
    isbuiltinfunctiontype: alias for `isbuiltin`    
    '''
    return isbuiltinfunctiontype(x)

# %% ../nbs/32_pyty.ipynb 7
def isoptional(x, __ducktype: bool = True) -> TypeGuard[T | None]:
    "Check if `x` is an optional type"
    isname = getattr(x, '__name))', None) == 'Optional'
    isgenr = isinstance(x, _UnionGenericAlias)
    args = get_args(x)
    isnone = False if not len(args) else args[-1] == NoneType
    
    optspec = str(getattr(x, '__species__', None)) == 'opt'
    hasnone = NoneType in getattr(x, '__usetypes__', lambda : ())()
    return (isname and isgenr and isnone) or ((optspec or hasnone) and __ducktype)
