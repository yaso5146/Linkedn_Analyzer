# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/30_insp.ipynb.

# %% auto 0
__all__ = ['issig', 'isspec', 'isparam', 'isp', 'iskwonly', 'isvarpos', 'isvarg', 'isvarkwd', 'isvkws', 'isvpos', 'isvarpok',
           'isvpok', 'isvarkwo', 'isvkwo', 'ispkwonly', 'isself', 'isclsarg', 'ispself', 'ispcls', 'ispsa', 'ispsk',
           'isparamempty', 'isempty', 'isemptyparam', 'ispempty', 'isfunc', 'islambda']

# %% ../nbs/30_insp.ipynb 4
from inspect import Parameter, Signature, isfunction, FullArgSpec, _empty, _ParameterKind as ParamKind
from types import FunctionType, LambdaType
from typing import TypeGuard

from typing import Literal, ParamSpecArgs, ParamSpecKwargs

# %% ../nbs/30_insp.ipynb 6
def issig(x) -> TypeGuard[Signature]:
    '''Check if x is of type `Signature`.'''
    return isinstance(x, Signature)

def isspec(x) -> TypeGuard[FullArgSpec]:
    '''Check if x is of type `FullArgSpec`.'''
    return isinstance(x, FullArgSpec)

# %% ../nbs/30_insp.ipynb 8
def isparam(p: Parameter) -> TypeGuard[Parameter]:
    '''Check if parameter is of type `Parameter`.
    
    See Also
    --------
    isp: Alias for `isparam`.
    '''
    return isinstance(p, Parameter)

def isp(p: Parameter) -> TypeGuard[Parameter]:
    '''Check if parameter is of type `Parameter`.
    
    See Also
    --------
    isparam: Alias for `isp`.
    '''
    return isparam(p)

# %% ../nbs/30_insp.ipynb 10
def iskwonly(x) -> TypeGuard[Parameter.KEYWORD_ONLY]:
    '''Check if `x` is `Parameter.KEYWORD_ONLY`.'''
    return x == Parameter.KEYWORD_ONLY

# %% ../nbs/30_insp.ipynb 11
def isvarpos(p: Parameter) -> TypeGuard[Parameter.VAR_POSITIONAL]:
    '''Check if parameter is of type `Parameter.VAR_POSITIONAL`.
    
    See Also
    --------
    isvarg: Alias for `isvarpos`.
    '''
    return isp(p) and p.kind == Parameter.VAR_POSITIONAL

def isvarg(p: Parameter) -> TypeGuard[Parameter.VAR_POSITIONAL]:
    '''Check if `x` is a parameter of `Parameter.VAR_POSITIONAL` kind.
    
    See Also
    --------
    isvarpos: Alias for `isvarg`.
    '''
    return isvarpos(p)

def isvarkwd(p: Parameter) -> TypeGuard[Parameter.VAR_KEYWORD]:
    '''Check if parameter is of type `Parameter.VAR_KEYWORD`.
    
    See Also
    --------
    isvkws: Alias for `isvarkwd`.
    '''
    return isp(p) and p.kind == Parameter.VAR_KEYWORD

def isvkws(p: Parameter) -> TypeGuard[Parameter.VAR_KEYWORD]:
    '''Check if `x` is a parameter of `Parameter.VAR_KEYWORD` kind.
    
    See Also
    --------
    isvarkwd: Alias for `isvkws`.
    '''
    return isvarkwd(p)

# %% ../nbs/30_insp.ipynb 12
def isvarpos(p: Parameter) -> TypeGuard[Parameter.POSITIONAL_ONLY]:
    '''Check if `x` is a parameter of `Parameter.POSITIONAL_ONLY` kind.
    
    See Also
    --------
    isvpos: Alias for `isvarpos`.
    '''
    return isp(p) and p.kind == Parameter.POSITIONAL_ONLY

def isvpos(p: Parameter) -> TypeGuard[Parameter.POSITIONAL_ONLY]:
    '''Check if `x` is a parameter of `Parameter.POSITIONAL_ONLY` kind.
    
    See Also
    --------
    isvarpos: Alias for `isvpos`.
    '''
    return isvarpos(p)

def isvarpok(p: Parameter) -> TypeGuard[Parameter.POSITIONAL_OR_KEYWORD]:
    '''Check if `x` is a parameter of `Parameter.POSITIONAL_OR_KEYWORD` kind.
    
    See Also
    --------
    isvpok: Alias for `isvarpok`.
    '''
    return isp(p) and p.kind == Parameter.POSITIONAL_OR_KEYWORD

def isvpok(p: Parameter) -> TypeGuard[Parameter.POSITIONAL_OR_KEYWORD]:
    '''Check if `x` is a parameter of `Parameter.POSITIONAL_OR_KEYWORD` kind.
    
    See Also
    --------
    isvarpok: Alias for `isvpok`.
    '''
    return isp(p) and p.kind == Parameter.POSITIONAL_OR_KEYWORD

def isvarkwo(p: Parameter) -> TypeGuard[Parameter.KEYWORD_ONLY]:
    '''Check if `x` is a parameter of `Parameter.KEYWORD_ONLY` kind.
    
    See Also
    --------
    isvkwo: Alias for `isvarkwo`.
    ispkwonly: Alias for `isvarkwo`.
    '''
    return isp(p) and p.kind == Parameter.KEYWORD_ONLY

def isvkwo(p: Parameter) -> TypeGuard[Parameter.KEYWORD_ONLY]:
    '''Check if `x` is a parameter of `Parameter.KEYWORD_ONLY` kind.
    
    See Also
    --------
    isvarkwo: Alias for `isvkwo`.
    ispkwonly: Alias for `isvkwo`.
    '''
    return isp(p) and p.kind == Parameter.KEYWORD_ONLY

def ispkwonly(p: Parameter) -> TypeGuard[Parameter.KEYWORD_ONLY]:
    '''Check if `p: Parameter` is of type `Parameter.KEYWORD_ONLY`.
    
    See Also
    --------
    isvarkwo: Alias for `ispkwonly`.
    isvkwo: Alias for `ispkwonly`.
    '''
    return isp(p) and iskwonly(p.kind)

# %% ../nbs/30_insp.ipynb 15
# NOTE: not sure if this is the same as `isinstance(x, Self)`
def isself(x) -> TypeGuard[Literal['self']]:
    '''Check if `x` is `"self"`.'''
    return x == 'self' 

# %% ../nbs/30_insp.ipynb 17
def isclsarg(x) -> TypeGuard[Literal['cls']]:
    '''Check if `x` is `"cls"`.'''
    return x == 'cls' 

# %% ../nbs/30_insp.ipynb 19
def ispself(p: Parameter) -> TypeGuard[Parameter]:
    '''Check if `p: Parameter` has `name = "self"`.'''
    return isp(p) and isself(p.name)

def ispcls(p: Parameter) -> TypeGuard[Parameter]:
    '''Check if `p: Parameter` has `name = "cls"`.'''
    return isp(p) and p.name == 'cls'

# %% ../nbs/30_insp.ipynb 20
def ispsa(x) -> TypeGuard[ParamSpecArgs]:
    '''Check if `x` is an instance of `ParamSpecArgs` i.e. `P.args`'''
    return isinstance(x, ParamSpecArgs)

def ispsk(x) -> TypeGuard[ParamSpecKwargs]:
    '''Check if `x` is an instance of `ParamSpecKwargs` i.e. `P.kwargs`'''
    return isinstance(x, ParamSpecKwargs)

# %% ../nbs/30_insp.ipynb 22
def isparamempty(x) -> TypeGuard[_empty]:
    '''Check if `x` is a `Parameter._empty`
    
    See Also
    --------
    isempty: Alias for `isparamempty`.
    '''
    return x is _empty

def isempty(x) -> TypeGuard[Parameter.empty]:
    '''Check if `x` is `Parameter.empty`.
    
    See Also
    --------
    isparamempty: Alias for `isempty`.
    '''
    return isparamempty(x)

def isemptyparam(x) -> TypeGuard[Parameter]:
    '''Check if `x` is a `Parameter` and that it's default value is `Parameter._empty`
    
    See Also
    --------
    ispempty: Alias for `isemptyparam`.
    '''
    return isp(x) and isempty(x.default)

def ispempty(p: Parameter) -> TypeGuard[Parameter.empty]:
    '''Check if `p: Parameter` is of type `Parameter.empty`.
    
    See Also
    --------
    isemptyparam: Alias for `ispempty`.
    '''
    return isemptyparam(p)

# %% ../nbs/30_insp.ipynb 24
def iskwonly(x) -> TypeGuard[Parameter.KEYWORD_ONLY]:
    '''Check if `x` is `Parameter.KEYWORD_ONLY`.'''
    return x == Parameter.KEYWORD_ONLY

def ispkwonly(p: Parameter) -> TypeGuard[Parameter.KEYWORD_ONLY]:
    '''Check if `p: Parameter` is of type `Parameter.KEYWORD_ONLY`.'''
    return isp(p) and iskwonly(p.kind)

# %% ../nbs/30_insp.ipynb 26
def isfunc(x) -> TypeGuard[FunctionType]:
    '''Check if `x` is a function.'''
    return isfunction(x)

def islambda(f) -> TypeGuard[LambdaType]:
    '''Check if `x` is a lambda function.'''
    return isfunction(f) and f.__name__ == '<lambda>'
