# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/16_enum.ipynb.

# %% auto 0
__all__ = ['issubenum', 'isenum', 'isintenum', 'isstrenum']

# %% ../nbs/16_enum.ipynb 4
from enum import Enum, IntEnum, StrEnum
from typing import TypeGuard
from typing import Union, Tuple

from .core import istype

# %% ../nbs/16_enum.ipynb 7
def issubenum(x) -> TypeGuard[Enum]:
    '''Check if `x` is a subclass of `Enum`.'''
    return istype(x) and issubclass(x, (Enum, StrEnum, IntEnum))

# %% ../nbs/16_enum.ipynb 9
def isenum(x) -> TypeGuard[Enum]:
    '''Check if `x` is an instance of `Enum`.'''
    return isinstance(x, (Enum, StrEnum, IntEnum))

def isintenum(x) -> TypeGuard[IntEnum]:
    '''Check if `x` is an instance of `IntEnum`.'''
    return isinstance(x, (IntEnum, ))

def isstrenum(x) -> TypeGuard[StrEnum]:
    '''Check if `x` is an instance of `StrEnum`.'''
    return isinstance(x, (StrEnum, ))

# %% ../nbs/16_enum.ipynb 10
def _chck_enum_vals(x) -> Tuple[TypeGuard[Enum], TypeGuard[Enum], TypeGuard[Enum], str, Union[int, str]]:
    '''Utility if `x` is an instance of `Enum` or if it or its type are a subclass of `Enum`.
    
    Returns
    -------
    t : TypeGuard[Enum]
        Whether `type(x)` is a subclass of `Enum`.
    s : TypeGuard[Enum]
        Whether `x` is an subclass of `Enum`.
    i : TypeGuard[Enum]
        Whether `x` is an instance of `Enum`.
    n : str
        The name of `x`. `None` if `x` is not an instance of `Enum`.
    v : Union[int, str]
        The value of `x`. `None` if `x` is not an instance of `Enum`.
    '''
    t, s, i = issubenum(type(x)), issubenum(x), isenum(x)
    n, v = getattr(x, 'name', None), getattr(x, 'value', None)
    return (t, s, i, n, v)
