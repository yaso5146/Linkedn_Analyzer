# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_wrap.ipynb.

# %% auto 0
__all__ = ['GuardKind', 'guard_rails', 'guard_any', 'guard_all', 'guardname', 'guarddocs', 'guardanns', 'setwrapattrs',
           'makeguard', 'wrapguard', 'decoguard', 'vanilla', 'isguard']

# %% ../nbs/04_wrap.ipynb 4
from functools import wraps
from enum import StrEnum, auto
from typing import TypeGuard, Callable
from typing import Any, Type

# %% ../nbs/04_wrap.ipynb 5
from .atyp import T, G, P, TypeDesc, GuardFunc
from .comp import anyguard, allguard
from .core import notnone

# %% ../nbs/04_wrap.ipynb 8
class GuardKind(StrEnum):
    all = auto()
    any = auto()

def guard_rails(guard: GuardFunc = notnone, / , *guards: GuardFunc, kind: GuardKind = GuardKind.any) -> Callable[[object], GuardFunc]:
    gn = allguard if kind == GuardKind.all else anyguard
    def decorator(fn: Callable[[object], Any]) -> GuardFunc:
        @wraps(fn)
        def invoke(x: T) -> TypeGuard[G]:
            return gn(x, guard, *guards)
        return invoke
    return decorator

def guard_any(guard: GuardFunc = notnone, / , *guards: GuardFunc) -> Callable[[object], GuardFunc]:
    return guard_rails(guard, *guards, kind = GuardKind.any)

def guard_all(guard: GuardFunc = notnone, / , *guards: GuardFunc) -> Callable[[object], GuardFunc]:
    return guard_rails(guard, *guards, kind = GuardKind.all)

# %% ../nbs/04_wrap.ipynb 10
def guardname(cls: G):
    return f'is{cls.__name__.lower()}'

def guarddocs(cls: G) -> str:
    return f'''Check if `x` is a `{cls.__name__}`.'''

def guardanns(cls: G) -> dict:
    return {'x': 'typing.Any', 'return': TypeGuard[Type[cls]]}

def setwrapattrs(
    call: GuardFunc, cls: G,
    docsfn: TypeDesc = guarddocs,
    namefn: TypeDesc = guardname,
    annsfn: TypeDesc = guardanns,
) -> GuardFunc:
    # Update docstring
    call.__doc__ = call.__doc__ or docsfn(cls)    
    # Update name
    call.__name__ = namefn(cls)
    call.__qualname__ = namefn(cls)
    # Update annotations
    call.__annotations__ = annsfn(cls)
    return call

# %% ../nbs/04_wrap.ipynb 12
def makeguard(cls: G) -> GuardFunc:
    '''Creates a function that checks if an object is an instance of `cls`.'''
    def guard(x: Any) -> TypeGuard[cls]:
        f'''Check if `x` is a `{cls.__name__}`.'''        
        return isinstance(x, cls)
    guard = setwrapattrs(guard, cls)
    return guard

def wrapguard(cls: G, call: GuardFunc) -> GuardFunc:
    '''Creates a function that checks if an object is an instance of `cls`.
    Parameters
    ----------
    cls : type
        The class to check for.
    call : function
        The function to wrap and call if `__call_wrapped__` is `True`.
    
    Returns
    -------
    function : (x: Any, *args: P.args, **kwargs: P.kwargs) -> TypeGuard[Type[cls]]
        A function that checks if an object is an instance of `cls` with 
        the additional features.
        
    Notes
    -----
    The returned function has the following additional parameters:
    
    __call_wrapped__ : bool, default: True
        if `False`, the wrapped function is not called
        
    __pass_result__ : bool, default: False
        if `True`, the result of the wrapped function is passed to the 
        wrapped function.
    '''
    @wraps(call)
    def wrapper(x: Any, *args: P.args, **kwargs: P.kwargs) -> TypeGuard[Type[cls]]:
        f'''Check if `x` is a `{cls.__name__}`.'''
        res = None
        if kwargs.get('__call_wrapped__', True): res = call(x)
        if kwargs.get('__pass_result__', False): x = res
        return isinstance(x, cls)
        
    for mthd in (wrapper, call): mthd = setwrapattrs(mthd, cls)
    return wrapper

# %% ../nbs/04_wrap.ipynb 14
def decoguard(cls: G) -> GuardFunc:
    '''Automatically adds a type guard and docstring to a function.'''
    def decorator(call: GuardFunc) -> GuardFunc:
        return wrapguard(cls, call)
    return decorator

# %% ../nbs/04_wrap.ipynb 16
@wraps(makeguard)
def vanilla(cls: G) -> GuardFunc:
    '''Creates a function that checks if an object is an instance of `cls`.'''
    return makeguard(cls)

@wraps(decoguard)
def isguard(cls: G) -> GuardFunc:
    '''Automatically adds a type guard and docstring to a function.'''
    return decoguard(cls)

# vanilla = makeguard
# isguard = decoguard
