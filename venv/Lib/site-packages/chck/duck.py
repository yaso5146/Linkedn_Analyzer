# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_duck.ipynb.

# %% auto 0
__all__ = ['isduck', 'isducked', 'isduckspec', 'isduckmodule', 'isspecies', 'isspeciesopt', 'isspeciesreg', 'isspeciesnot']

# %% ../nbs/00_duck.ipynb 4
import inspect
from enum import Enum, EnumMeta
from numbers import Number
from typing import TypeGuard

from typing import Union
from quac.prot import DuckSpecProtocol, DuckProtocol, DuckLikeProtocol, DuckModuleProtocol
from quac.base import Duck, GenericDuck, DuckModule
from quac.enum import Species
from quac.meta import ABCDuck, ABCSpecies
from quac.spec import DuckSpec

# %% ../nbs/00_duck.ipynb 7
def isduck(x) -> TypeGuard[Duck | ABCDuck | DuckProtocol]:
    '''Check if `x` is a `Duck` type i.e. has all of the following attributes: `__ducktype__`, 
    `__expected__`, `__required__`, `__allequal__`, `__extrafns__`, `__usealias__`, `__generate__`.'''
    return isinstance(x, (Duck, ABCDuck, DuckProtocol))

def isducked(x) -> TypeGuard[DuckLikeProtocol]:
    '''Check if `x` is `ducked` i.e. has one of the following attributes:
    `duck`, `__duck__`, `__ducktypes__`.'''
    return isinstance(x, (Duck, DuckLikeProtocol, ))

def isduckspec(x) -> TypeGuard[DuckSpec | DuckSpecProtocol]:
    '''Check if `x` is a `DuckSpec` i.e. has all of the following attributes:
    `asset`, `is_module`, `ducked`, `default`, `bases`, `attrs`, `delayed`.'''
    return isinstance(x, (DuckSpec, DuckSpecProtocol, ))

def isduckmodule(x) -> TypeGuard[DuckModule | DuckModuleProtocol]:
    '''Check if `x` is `DuckModule` i.e. has all of the following attributes
    `__alts__`, `__hush__`, `__duckmodule__`.'''
    return isinstance(x, (DuckModule, DuckModuleProtocol, ))
    
def isspecies(x) -> TypeGuard[Species | ABCSpecies]:
    '''Check if `x` is a `Species`'''
    return isinstance(x, (Species, ABCSpecies, ))

def isspeciesopt(x) -> TypeGuard[Species | ABCSpecies]:
    '''Check if `x` is a `Species.OPT`'''
    return isspecies(x) and Species.OPT in (x, getattr(x, '__species__', None))

def isspeciesreg(x) -> TypeGuard[Species | ABCSpecies]:
    '''Check if `x` is a `Species.REG`'''
    return isspecies(x) and Species.REG in (x, getattr(x, '__species__', None))

def isspeciesnot(x) -> TypeGuard[Species | ABCSpecies]:
    '''Check if `x` is a `Species.NOT`'''
    return isspecies(x) and Species.NOT in (x, getattr(x, '__species__', None))
