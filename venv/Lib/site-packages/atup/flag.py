# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_flag.ipynb.

# %% auto 0
__all__ = ['TYPE_FLAGS', 'TypeFlagMeta', 'TypeFlag']

# %% ../nbs/01_flag.ipynb 6
from _collections_abc import dict_keys, dict_values, dict_items
from functools import wraps, partial

# %% ../nbs/01_flag.ipynb 8
from typing import (Self, Optional, TypeGuard, Generator, )

# %% ../nbs/01_flag.ipynb 10
#| export


# %% ../nbs/01_flag.ipynb 12
#| export

# %% ../nbs/01_flag.ipynb 14
from .atyp import dictiters, Types, FlagDict, NeedCast, TypeCastingConfig

# %% ../nbs/01_flag.ipynb 17
class TypeFlagMeta(type):
    '''A metaclass for creating TypeFlag classes that can dynamically access flags.

    Attributes
    ----------
    _flags : dict[str, Self]
        A class-level dictionary storing instances of TypeFlag or its subclasses.

    Methods
    -------
    __getattr__(attr: str)
        Enables dynamic access to attributes, including those representing flags.
        
    flagged(**kwargs: TypeCastingConfig)
        Returns the types that are flagged by the given keyword arguments.
        
    asdict(**kwargs: TypeCastingConfig)
        Returns a dictionary mapping flag names to their boolean values based on the given keyword arguments.
        
    __prep__(kind: type | Types, name: str | None = None, default: bool = True)
        Prepares and returns the initial values for a TypeFlag instance.
    '''
    _flags: dict[str, Self] = {}
    def __getattr__(cls, attr: str):
        try: return super().__getattr__(attr)
        except (AttributeError, KeyError):
            try: return cls._flags.get(attr, None)
            except KeyError: raise AttributeError(f"'{cls.__name__}' has no attribute '{attr}'")
    
    def flagged(cls, **kwargs: TypeCastingConfig) -> Types:
        '''Returns the types that are flagged by the given keyword arguments.

        Parameters
        ----------
        **kwargs : TypeCastingConfig
            Keyword arguments that define the casting configuration for types.

        Returns
        -------
        Types
            A tuple of types that are flagged according to the given keyword arguments.

        Examples
        --------
        >>> TypeFlagMeta.flagged(TypeCastingConfig())
        (
            tuple,
            range,
            dict_keys,
            dict_values,
            dict_items,
            dict_keys,
            dict_values,
            dict_items,
            typing.Generator
        )
        '''
        res: Types = ()
        for flag in cls._flags.values():
            res += flag.flag(**kwargs)
        return res
    
    def asdict(cls, **kwargs: TypeCastingConfig) -> FlagDict:
        '''Returns a dictionary mapping flag names to their boolean values based on the given keyword arguments.

        Parameters
        ----------
        **kwargs : TypeCastingConfig
            Keyword arguments that define the casting configuration for types.

        Returns
        -------
        FlagDict
            A dictionary where keys are flag names and values are boolean indicators of whether each flag is set.

        Examples
        --------
        >>> TypeFlagMeta.asdict(myconfig=True)
        {'typeA': True, 'typeB': False}
        
        >>> list(TypeFlag.asdict().keys())
        [
            '__list',
            '__tuple',
            '__range',
            '__dict',
            '__dict_keys',
            '__dict_values',
            '__dict_items',
            '__dictiters',
            '__generator'
        ]
        '''
        res: FlagDict = {}
        for flag in cls._flags.values():
            res[flag.attr] = True if flag.flag(**kwargs) != () else False
        return res
        
    def __prep__(cls, kind: type | Types, name: str | None = None, default: bool = True) -> tuple[Types, str, bool]:
        '''Prepares and returns the initial values for creating or identifying a TypeFlag instance.

        Parameters
        ----------
        kind : type | Types
            The type or tuple of types associated with the flag.
        name : str | None, optional
            The name of the flag. If None, the name is derived from the type.
        default : bool, default True
            The default flag state.

        Returns
        -------
        tuple[Types, str, bool]
            A tuple containing the types, name, and default state for the flag.

        Examples
        --------
        >>> TypeFlagMeta.__prep__(int, 'integer', False)
        ((<class 'int'>,), 'integer', False)
        '''
        kind = kind if isinstance(kind, tuple) else (kind, )
        if name is None: name = getattr(kind[0], '__name__' , 'misc').lower()
        return kind, name, default

# %% ../nbs/01_flag.ipynb 19
class TypeFlag(metaclass=TypeFlagMeta):
    '''Represents a flag associated with one or more types, allowing dynamic type checks and configurations.

    Attributes
    ----------
    kind : Types
        The type or types associated with the flag.
        
    name : str | None
        The name of the flag.
        
    default : bool
        The default state of the flag.
        
    attr : str
        The attribute name generated from the flag's name, used for accessing it.

    Methods
    -------
    flag(**kwargs: TypeCastingConfig)
        Evaluates and returns the types based on the given keyword arguments and the flag's state.
    '''
    kind: Types
    name: str | None = None
    default: bool = True
    attr: str = property(lambda self: f'__{self.name}')
    
    def __new__(cls, kind: type | Types, name: str | None = None, default: bool = True):
        '''Creates a new TypeFlag instance or returns an existing one if a flag with the same name already exists.

        Parameters
        ----------
        kind : type | Types
            The type or tuple of types associated with the flag.
            
        name : str | None, optional
            The name of the flag. If None, the name is derived from the type.
            
        default : bool, default True
            The default flag state.
        '''
        kind, name, default = cls.__prep__(kind, name, default)
        if name in cls._flags: return cls._flags[name]
        cls._flags[name] = (self := super().__new__(cls))
        return self
    
    def __init__(self, kind: type | tuple[type, ...], name: str | None = None, default: bool = True):
        '''Initializes a TypeFlag instance with given type, name, and default state.

        Parameters
        ----------
        kind : type | Types
            The type or tuple of types associated with the flag.
            
        name : str | None, optional
            The name of the flag. If None, the name is derived from the type.
            
        default : bool, default True
            The default flag state.
        '''
        self.kind, self.name, self.default = type(self).__prep__(kind, name, default)
    
    def __repr__(self) -> str: 
        '''Returns a string representation of the TypeFlag instance.

        Returns
        -------
        str
            The string representation of the TypeFlag.
        '''
        return f'TypeFlag({self.name})'
    
    def flag(self, **kwargs: TypeCastingConfig) -> Types:
        '''Evaluates and returns the types based on the given keyword arguments and the flag's state.

        Parameters
        ----------
        **kwargs : TypeCastingConfig
            Keyword arguments that define the casting configuration for types.

        Returns
        -------
        Types
            The type or types associated with the flag, depending on the flag's state and the given arguments.

        Examples
        --------
        >>> my_flag = TypeFlag(int, 'integer')
        >>> my_flag.flag(__integer=True)
        (<class 'int'>,)
        '''
        hasname = kwargs.get(self.attr, self.default)
        return self.kind if hasname else ()

# %% ../nbs/01_flag.ipynb 21
TYPE_FLAGS: tuple[TypeFlag, ...] = (
    TypeFlag(list, default=False),
    TypeFlag(tuple),
    TypeFlag(range), 
    TypeFlag(dict, default=False), 
    TypeFlag(dict_keys), 
    TypeFlag(dict_values), 
    TypeFlag(dict_items), 
    TypeFlag(dictiters, name='dictiters'), 
    TypeFlag(Generator)
)
