# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_util.ipynb.

# %% auto 0
__all__ = ['nones', 'nextnone', 'fill', 'fillnone', 'join', 'jointups', 'normalize', 'pack']

# %% ../nbs/03_util.ipynb 6
from itertools import product, zip_longest
from functools import partial, wraps
# from deprecated import deprecated

# %% ../nbs/03_util.ipynb 8
from typing import (Any, Union, Iterable, Generator, )

# %% ../nbs/03_util.ipynb 10
#| export


# %% ../nbs/03_util.ipynb 12
#| export

# %% ../nbs/03_util.ipynb 14
from .atyp import P, Anys, Nones, TypeCastingConfig
from .cast import (notnone, item2tup, atup2tup, vdic2tup, mapneeds, isneedcast)

# %% ../nbs/03_util.ipynb 16
def nones(n: int) -> Nones: 
    '''Return a tuple of `n` `None` values'''
    return tuple((None, ) * n)

def nextnone(item: Iterable) -> Generator:
    '''Return the next non-`None` value in the iterable `item` or `None` if no such value exists.'''
    return next((x for x in item if notnone(x)), None)

# %% ../nbs/03_util.ipynb 18
def fill(tup: tuple, n: int, pad: Any = None) -> tuple:    
    '''Fill the tuple instance `tup` with `pad` values appended until length is `n`

    Parameters
    ----------
    tup : tuple
        The tuple to be filled with `pad`.
        
    n : int
        The length of the resultant `vargs` instance.
        
    pad : optional, default: None
        The value to append to the resultant `vargs` instance until length is `n`.
    
    Returns
    -------
    result: tuple
        A tuple of at least length `n` with the remaining values filled with `pad`.
    '''
    return tup + ((pad, ) * (n - len(tup)))

# %% ../nbs/03_util.ipynb 19
def fillnone(tup: tuple, n: int) -> Union[Anys, Nones]:
    '''Fill the tuple instance `tup` with `None` values appended until length is `n`

    Parameters
    ----------
    tup : tuple
        The tuple to be filled with `pad`.
        
    n : int
        The length of the resultant `vargs` instance.
        
    Returns
    -------
    result: tuple[Any, ..., None, ...]
        A tuple of at least length `n` with the remaining values filled with `None`.
    '''
    return partial(fill, pad = None)(item2tup(tup), n)


# %% ../nbs/03_util.ipynb 21
def join(*tups: tuple) -> tuple:
    '''Join multiple tuples into a single tuple, selecting the first non-`None` value
    from each position across the input tuples. If all values in a position are
    `None`, the result for that position is `None`.
    
    Parameters
    ----------
    *tups : tuple
        A variable-length argument list of tuples to be joined.
    
    Returns
    -------
    tuple
        A tuple containing the first non-`None` value from each position across the input tuples.
    
    Examples
    --------
    >>> join((1, None, 3), (None, 2, None))
    (1, 2, 3)
    
    >>> join((None, None), (4, None), (None, 5))
    (4, 5)
    '''
    return tuple(nextnone(item) for item in zip_longest(*tups))

# %% ../nbs/03_util.ipynb 22
# @deprecated(reason='use `join` instead of `jointups`', action='ignore')
@wraps(join, assigned=('__annotations__', '__doc__'))
def jointups(*tups: tuple): return join(*tups)

# %% ../nbs/03_util.ipynb 24
def normalize(*args: P.args, useindex: bool = False, **kwargs: TypeCastingConfig) -> tuple:
    '''Normalize variadic arguments `args` into a single tuple
    
    Parameters
    ----------
    *args : P.args
        The variadic arguments to normalize into a single tuple.
        
    useindex : bool, default: False
        If `True`, the index of the item is used to ensure only the first item in the sequence is cast to a `tuple`.
        Otherwise, all items are cast to a `tuple` if necessary.
        
    **kwargs : TypeCastingConfig
        Additional keyword arguments to pass to `need2tup`.
    
    See Also
    --------
    `vdic.core.mapneeds` : Map variadic arguments to a tuple of normalized values.
    '''
    kwargs.update(useindex=useindex, __useindex=useindex)
    if len(args) == 1 and isneedcast(args[0], **kwargs):
        return normalize(*args[0], **kwargs)
    return atup2tup(*mapneeds(*args,  **kwargs))
    # return vdic2tup(*mapneeds(*args,  **kwargs))

# %% ../nbs/03_util.ipynb 26
def pack(*args: P.args, n: int = 1, **kwargs: P.kwargs) -> tuple:
    '''Pack `args` into a tuple of length `n`.
    
    Parameters
    ----------
    *args : P.args
        The variadic arguments to pack into a tuple of length `n`.
        
    n : int, default: 1
        The minimum length of the resultant tuple.
        
    **kwargs : P.kwargs
        Additional keyword arguments to pass to `normalize`.
        
    Returns
    -------
    tuple
        A tuple with length of at least `n` containing the packed `args`.
        
    Notes
    -----
    1. Useful when you want to use unpacking with an unknown number of arguments.
    2. This notion is what differentiates `pack` from `fill` as `pack` is designed to be used 
    with unpacking.
    
    See Also
    --------
    `vdic.core.normalize` : Normalize variadic arguments into a single tuple.
    '''
    return fillnone(normalize(args, **kwargs), n) 
