# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_atyp.ipynb.

# %% auto 0
__all__ = ['P', 'dictiters', 'Anys', 'AnyQ', 'IntQ', 'ListQ', 'KeysQ', 'IterQ', 'IdxVal', 'IdxValQ', 'IdxKeyVal', 'IdxKeyValQ',
           'Nones', 'Types', 'FlagDict', 'BoolFunc', 'DictIters', 'NeedCast', 'TypeCastingConfig']

# %% ../nbs/00_atyp.ipynb 6
from _collections_abc import dict_keys, dict_values, dict_items

# %% ../nbs/00_atyp.ipynb 8
from typing import (Any, Union, TypeAlias, TypedDict, Generator, ParamSpec, Optional, Iterable, Callable)
P = ParamSpec('P')

# %% ../nbs/00_atyp.ipynb 10
#| export


# %% ../nbs/00_atyp.ipynb 12
#| export

# %% ../nbs/00_atyp.ipynb 14
#| export


# %% ../nbs/00_atyp.ipynb 16
dictiters = (dict_keys, dict_values, dict_items)
'''A tuple of the three types of dictionary views: `dict_keys`, `dict_values`, and `dict_items`''';

# %% ../nbs/00_atyp.ipynb 18
Anys: TypeAlias = tuple[Any, ...]
'''`tuple[Any, ...]`''';

AnyQ: TypeAlias = Optional[Any]
'''`Any | None`''';

IntQ: TypeAlias = Optional[int]
'''`int | None`''';

ListQ: TypeAlias = Optional[list]
'''`list | None`''';

KeysQ: TypeAlias = Optional[Iterable[str] | dict_keys]
'''`Iterable[str] | dict_keys | None`''';

IterQ: TypeAlias = Optional[Iterable]
'''`Iterable | None`''';

IdxVal: TypeAlias = tuple[int, Any]
'''`tuple[idx: int, val: Any]`''';

IdxValQ: TypeAlias = Optional[IdxVal]
'''`tuple[idx: int, val: Any] | None`''';

IdxKeyVal: TypeAlias = tuple[int, str, Any]
'''`tuple[idx: int, key: str, val: Any]`''';

IdxKeyValQ: TypeAlias = Optional[IdxKeyVal]
'''`tuple[idx: int, key: str, val: Any] | None`''';

Nones: TypeAlias = tuple[None, ...]
'''`tuple[None, ...]`''';

Types: TypeAlias = tuple[type, ...]
'''`tuple[type, ...]`''';

FlagDict: TypeAlias = dict[str, bool]
'''`dict[str, bool]`''';

BoolFunc: TypeAlias = Union[bool, Callable[P, bool]]
'''`bool | Callable[P, bool]` 

A type alias for a boolean or a function that returns a boolean.
''';

DictIters: TypeAlias = Union[dict_keys, dict_values, dict_items]
'''`dict_keys`, `dict_values`, or `dict_items`''';

NeedCast: TypeAlias = Union[tuple, range, dict_keys, dict_values, dict_items, Generator]
'''`tuple`, `range`, `dict_keys`, `dict_values`, `dict_items`, `Generator`''';

# %% ../nbs/00_atyp.ipynb 20
class TypeCastingConfig(TypedDict):
    '''A dictionary that holds the configuration for type casting
    
    Other Parameters
    ----------------
    __list : bool, default: False
        Add `list` to the types to check.
        
    __tuple : bool, default: True
        Add `tuple` to the types to check.
        
    __range : bool, default: True
        Add `range` to the types to check.
        
    __dict : bool, default: False
        Add `dict` to the types to check.
        
    __dict_keys : bool, default: True
        Add `dict_keys` to the types to check.
        
    __dict_values : bool, default: True
        Add `dict_values` to the types to check.
        
    __dict_items : bool, default: True
        Add `dict_items` to the types to check.
        
    __dictiters : bool, default: True
        Add all `dict` iterators to the types to check.
        
    __generator : bool, default: True
        Add `Generator` to the types to check.
    '''
    __list: bool = False
    __tuple: bool = True
    __range: bool = True
    __dict: bool = False
    __dict_keys: bool = True
    __dict_values: bool = True
    __dict_items: bool = True
    __dictiters: bool = True
    __generator: bool = True
