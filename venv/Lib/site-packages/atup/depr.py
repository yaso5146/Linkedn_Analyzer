# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/99_depr.ipynb.

# %% auto 0
__all__ = ['P', 'VArgs', 'notnone', 'istuple', 'isrange', 'isdictiter', 'tup2args', 'dct2args', 'rng2args', 'val2tup', 'jointups',
           'argtup', 'nones', 'fill', 'fillnone', 'dropnone', 'pack']

# %% ../nbs/99_depr.ipynb 6
from itertools import zip_longest
from _collections_abc import dict_keys, dict_values, dict_items

# %% ../nbs/99_depr.ipynb 8
from typing import Any, Union, TypeAlias, TypeGuard, ParamSpec

# %% ../nbs/99_depr.ipynb 10
#| export


# %% ../nbs/99_depr.ipynb 12
#| export


# %% ../nbs/99_depr.ipynb 14
#| export


# %% ../nbs/99_depr.ipynb 16
P = ParamSpec('P')
VArgs: TypeAlias = Union[Any, tuple]

# %% ../nbs/99_depr.ipynb 19
def notnone(x) -> TypeGuard[Any]:
    '''Check if `x` is not `None`.'''
    return not (x is None)

def istuple(x) -> TypeGuard[tuple]:
    '''Check if `x` is an `tuple`.'''
    return isinstance(x, tuple)

def isrange(x) -> TypeGuard[range]:
    '''Check if `x` is a `range`.'''
    return isinstance(x, range)

def isdictiter(x) -> TypeGuard[Union[dict_keys, dict_values, dict_items]]:
    '''Check if `x` is a `dict_keys`, `dict_values`, or `dict_items`.'''
    return isinstance(x, (dict_keys, dict_values, dict_items))

# %% ../nbs/99_depr.ipynb 22
def tup2args(*args: VArgs) -> tuple:
    '''Deconstruct `*args` until the first argument is not a one-element tuple
    
    Examples
    --------
    >>> Recursive deconstruction
    >>> tup2args(1), tup2args((1, )), tup2args(((1, ), ))
    ((1,), (1,), (1,))

    >>> # Deconstruct only the first argument, tuples ok at other positions
    >>> tup2args(1, 2), tup2args('a', (1, )), tup2args('a', 1, ), tup2args(*['a'])
    ((1, 2), ('a', (1,)), ('a', 1), ('a',))

    >>> # handle unpacking
    >>> tup2args([]), tup2args(*[])
    (([],), ())
    '''
    return tup2args(*args[0]) if len(args) == 1 and istuple(args[0]) else args


# %% ../nbs/99_depr.ipynb 25
def dct2args(*args: VArgs) -> tuple:
    '''Deconstruct `*args` until the first argument is not a dictionary iterator type.
    
    Dictionary iterator types include `dict_keys`, `dict_values`, or `dict_items`.
    If the first argument is one of these types, it is deconstructed into a tuple.
    
    Parameters
    ----------
    *args : VArgs
        A variable-length argument list which may contain dictionary iterators.
    
    Returns
    -------
    tuple
        A tuple containing the deconstructed elements of `*args`.
    
    Examples
    --------
    >>> dct2args({'a': 1}.keys())
    (('a',),)
    
    >>> dct2args({'a': 1}.values())
    ((1,),)
    
    >>> dct2args({'a': 1}.items())
    ((('a', 1),),)
    '''
    args = tup2args(*args)
    return dct2args(*args[0]) if len(args) == 1 and isdictiter(args[0]) else args

# %% ../nbs/99_depr.ipynb 27
def rng2args(*args: VArgs) -> tuple:
    '''Deconstruct `*args` until the first argument is not a `range` object.
    
    If the first argument is a `range` object, it is converted into a tuple.
    
    Parameters
    ----------
    *args : VArgs
        A variable-length argument list which may contain a range object.
    
    Returns
    -------
    tuple
        A tuple containing the deconstructed elements of `*args`.
    
    Examples
    --------
    >>> rng2args(range(3))
    ((0, 1, 2),)
    
    >>> rng2args(range(1, 4))
    ((1, 2, 3),)
    '''
    args = tup2args(*args)
    return rng2args(*args[0]) if len(args) == 1 and isrange(args[0]) else args

# %% ../nbs/99_depr.ipynb 29
def val2tup(val) -> tuple:
    '''Wrap `val` in a tuple if it is not already a tuple. 
    
    This function ensures
    that the input value is always returned as a tuple, facilitating uniform
    handling of function arguments.
    
    Parameters
    ----------
    val : Any
        The value to be wrapped in a tuple.
    
    Returns
    -------
    tuple
        The input value wrapped in a tuple, or the value itself if it was already a tuple.
    
    Examples
    --------
    >>> val2tup(1)
    (1,)
    
    >>> val2tup((1, 2))
    (1, 2)
    '''
    return val if istuple(val := dct2args(val)) else (val, )

# %% ../nbs/99_depr.ipynb 31
def jointups(*tups: tuple) -> tuple:
    '''
    Join multiple tuples into a single tuple, selecting the first non-`None` value
    from each position across the input tuples. If all values in a position are
    `None`, the result for that position is `None`.
    
    Parameters
    ----------
    *tups : tuple
        A variable-length argument list of tuples to be joined.
    
    Returns
    -------
    tuple
        A tuple containing the first non-`None` value from each position across the input tuples.
    
    Examples
    --------
    >>> jointups((1, None, 3), (None, 2, None))
    (1, 2, 3)
    
    >>> jointups((None, None), (4, None), (None, 5))
    (4, 5)
    '''
    return tuple(next((x for x in item if notnone(x)), None) for item in zip_longest(*tups))

# %% ../nbs/99_depr.ipynb 33
def argtup(*args: VArgs) -> tuple:
    '''Wrangle `*args` into a tuple of arguments
    
    Examples
    --------
    >>> Recursive deconstruction
    >>> argtup(1), argtup((1, )), argtup(((1, ), ))
    ((1,), (1,), (1,))

    >>> # Deconstruct only the first argument, tuples ok at other positions
    >>> argtup(1, 2), argtup('a', (1, )), argtup('a', 1, ), argtup(*['a'])
    ((1, 2), ('a', (1,)), ('a', 1), ('a',))

    >>> # handle unpacking
    >>> argtup([]), argtup(*[])
    (([],), ())
    '''
    return val2tup(tup2args(dct2args(rng2args(args))))

# %% ../nbs/99_depr.ipynb 40
def nones(n: int) -> tuple[None, ...]: 
    '''Return a tuple of `n` `None` values'''
    return tuple((None, ) * n)

def fill(tup: tuple, n: int, pad = None) -> tuple:
    '''Return `tup` with `pad` values appended until length is `n`'''
    return tup + ((pad, ) * (n - len(tup)))

def fillnone(tup: tuple, n: int) -> tuple:
    '''Return `tup` with `None` values appended until length is `n`'''
    tup = tup if istuple(tup) else tuple(tup)
    return tup + nones(n - len(tup))

def dropnone(*args: VArgs) -> tuple: 
    '''Return `args` with `None` values removed'''
    return tuple(filter(notnone, argtup(args)))

# %% ../nbs/99_depr.ipynb 42
def pack(*args: tuple, n: int = 1) -> tuple:
    '''Pack `args` into a tuple of length `n`'''
    return fillnone(argtup(args), n) 
