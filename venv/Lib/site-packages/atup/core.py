# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_core.ipynb.

# %% auto 0
__all__ = ['vargsmeta', 'vargs', 'vdic', 'atup', 'argtup']

# %% ../nbs/04_core.ipynb 6
from functools import wraps
# from deprecated import deprecated

# %% ../nbs/04_core.ipynb 8
from typing import (Any, Type, Self, Iterable,)


# %% ../nbs/04_core.ipynb 10
#| export


# %% ../nbs/04_core.ipynb 12
#| export

# %% ../nbs/04_core.ipynb 14
from .atyp import P
from .util import (fill, join, normalize, pack)

# %% ../nbs/04_core.ipynb 16
class vargsmeta(type):
    def __normalize__(cls, *args: P.args, **kwargs: P.kwargs) -> tuple:
        return normalize(*args, **kwargs)

# %% ../nbs/04_core.ipynb 17
class vargs(tuple, metaclass=vargsmeta):
    '''A tuple subclass that wrangles and normalizes `*args` into a tuple of variadic arguments
    
    Examples
    --------
    >>> Recursive deconstruction
    >>> vargs(1), vargs((1, )), vargs(((1, ), ))
    ((1,), (1,), (1,))

    >>> # Deconstruct only the first argument, tuples ok at other positions
    >>> vargs(1, 2), vargs('a', (1, )), vargs('a', 1, ), vargs(*['a'])
    ((1, 2), ('a', (1,)), ('a', 1), ('a',))

    >>> # handle unpacking
    >>> vargs([]), vargs(*[])
    (([],), ())
    '''
    def __new__(cls: Type[Self], *args: Iterable, **kwargs) -> Self:
        std = cls.__normalize__(*args, **kwargs)
        new = super(vargs, cls).__new__(cls, std)
        return new
    
    @classmethod # Alternate method name ideas: weld / meld / bind / fuse / mesh
    def fuse(cls: Type[Self], *tups: tuple | Type[Self]) -> Type[Self]:
        '''Fuse multiple `tuple` or `vargs` instances into a single `vargs` instance, 
        selecting the first non-`None` value from each position across the inputs. 
        If all values in a position are `None`, the result for that position is `None`.
        
        Parameters
        ----------
        *tups : tuple | vargs
            A variable-length argument list of tuples or `vargs` to be joined.
        
        Returns
        -------
        result: vargs
            A vargs containing the first non-`None` value from each position 
            across the input tuples.
        
        Examples
        --------
        >>> vargs.fuse((1, None, 3), (None, 2, None))
        (1, 2, 3)
        
        >>> vargs.fuse((None, None), (4, None), (None, 5))
        (4, 5)
        
        See Also
        --------
        join : Join multiple tuples into a single tuple, selecting the first 
            non-`None` value from each position across the input tuples.
        '''
        return cls(join(*tups))
    
    @classmethod # Alternate method name ideas: buff (buffer)
    def buff(cls: Type[Self], *tups: tuple | Type[Self],  n: int = 1, pad: Any = None) -> Type[Self]:
        '''Fuse and then buffer the resultant instance with `pad` values appended until length is `n`
        
        The multiple `tuple` or `vargs` instances of `tups` are _fused_ into single `vargs` instance, 
        then the resultant instance is buffered with `pad` values appended until length is `n`
        
        Parameters
        ----------
        n : int
            The length of the resultant `vargs` instance.
            
        *tups : tuple | vargs
            A variable-length argument list of tuples or `vargs` to be joined.
            
        pad : optional, default: None
            The value to append to the resultant `vargs` instance until length is `n`.
        
        Returns
        -------
        result: vargs
            A vargs containing the first non-`None` value from each position 
            across the input tuples.
            
        See Also
        --------
        join : Join multiple tuples into a single tuple, selecting the first 
            non-`None` value from each position across the input tuples.
            
        fill : Return `tup` with `pad` values appended until length is `n`
        '''
        return cls(fill(cls.fuse(*tups), n=n, pad=pad))

    @classmethod # Alternate method name ideas: nest / cram / fold / stow
    def stow(cls: Type[Self], *args: P.args, n: int = 0, **kwargs: P.kwargs) -> Type[Self]:
        '''Stow `None` into variadic `args` until it is an instance of length `n`
        
        Parameters
        ----------
        n : int
            The length of the resultant `vargs` instance.
            
        *args : tuple[Any, ...]
            A variable-length argument list of tuples or `vargs` to be joined.
        '''
        return cls(pack(*args, n=n, **kwargs))
    
    def join(self: Self, *tups: tuple | Type[Self]) -> Type[Self]:
        '''Join multiple `tuple` or `vargs` instances into a single `vargs` instance, 
        selecting the first non-`None` value from each position across the inputs. 
        If all values in a position are `None`, the result for that position is `None`.
        
        Parameters
        ----------
        *tups : tuple | vargs
            A variable-length argument list of tuples or `vargs` to be joined.
        
        Returns
        -------
        result: vargs
            A vargs containing the first non-`None` value from each position 
            across the input tuples.
        
        Examples
        --------
        >>> vargs.join((1, None, 3), (None, 2, None))
        (1, 2, 3)
        
        >>> vargs.join((None, None), (4, None), (None, 5))
        (4, 5)
        
        See Also
        --------
        join : Join multiple tuples into a single tuple, selecting the first 
            non-`None` value from each position across the input tuples.
        '''
        return self.fuse(self, *tups)
    
    def fill(self: Self, n: int = 1, *tups: tuple | Type[Self], pad: Any = None) -> Type[Self]:
        '''Join and then fill the resultant instance with `pad` values appended until length is `n`
        
        The multiple `tuple` or `vargs` instances of `tups` are joined into single `vargs` instance, 
        then fill the resultant instance with  `pad` values appended until length is `n`
        
        Parameters
        ----------
        n : int
            The length of the resultant `vargs` instance.
            
        *tups : tuple | vargs
            A variable-length argument list of tuples or `vargs` to be joined.
            
        pad : optional, default: None
            The value to append to the resultant `vargs` instance until length is `n`.
        
        Returns
        -------
        result: vargs
            A vargs containing the first non-`None` value from each position 
            across the input tuples.
            
        See Also
        --------
        join : Join multiple tuples into a single tuple, selecting the first 
            non-`None` value from each position across the input tuples.
            
        fill : Return `tup` with `pad` values appended until length is `n`
        '''
        return self.buff(self.join(*tups), n=n, pad=pad)
    
    def pack(self: Self, *args: P.args, n: int = 0, **kwargs: P.kwargs) -> Type[Self]:
        '''Pack `args` into a a single `vargs` instance of length `n`
        
        Parameters
        ----------
        n : int
            The length of the resultant `vargs` instance.
            
        *args : tuple[Any, ...]
            A variable-length argument list of tuples or `vargs` to be joined.
        '''
        return self.stow(*self, *args, n=n, **kwargs)
    
    def __or__(self: Self, other: tuple | Type[Self]) -> Type[Self]:
        return self.join(other)
    
    def __lshift__(self: Self, n: int = 0) -> Type[Self]:
        return self.fill(n=n)

# %% ../nbs/04_core.ipynb 25
@wraps(vargs, updated=())
class vdic(vargs): ...

@wraps(vargs, updated=())
class atup(vargs): ...

# %% ../nbs/04_core.ipynb 26
# @deprecated(reason='use `vargs` instead of `argtup`', action='ignore')
class argtup(vargs): ...
