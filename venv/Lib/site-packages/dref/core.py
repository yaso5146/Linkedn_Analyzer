# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['isstr', 'isnone', 'isforwardref', 'dereference', 'dref']

# %% ../nbs/00_core.ipynb 6
from functools import wraps

# %% ../nbs/00_core.ipynb 8
from typing import TypeGuard, ForwardRef

# %% ../nbs/00_core.ipynb 10
#| export


# %% ../nbs/00_core.ipynb 12
#| export


# %% ../nbs/00_core.ipynb 14
#| export


# %% ../nbs/00_core.ipynb 16
def isstr(x) -> TypeGuard[str]:
    '''Check if `x` is an `str`.'''
    return isinstance(x, str)

def isnone(x) -> TypeGuard[None]:
    '''Check if `x` is `None`.'''
    return x is None

def isforwardref(x) -> TypeGuard[ForwardRef]:
    '''Check if `x` is a `ForwardRef`.'''
    return isinstance(x, ForwardRef)

# %% ../nbs/00_core.ipynb 17
def dereference(
    ref: ForwardRef | str,
    is_argument: bool = False,
    module: str = None,
    *,
    is_class: bool = False,
    globalsns: dict = None, 
    localsns: dict = None, 
    recursive_guard: set = None
) -> type:    
    '''
    Dereference a `ForwardRef` object.

    Parameters
    ----------
    ref : ForwardRef | str
        The reference to be dereferenced. Can be a `ForwardRef` object or a string.

    is_argument : bool, default: False
        Indicates if `ref` is an argument, by default False.

    module : str, optional
        The module in which the reference is located, by default None.

    is_class : bool, default: False
        Indicates if the reference is a class, by default False.

    globalsns : dict, optional
        Global namespace where the reference will be looked up, by default uses the global namespace where this function is called.

    localsns : dict, optional
        Local namespace where the reference will be looked up, by default uses the local namespace where this function is called.

    recursive_guard : set, optional
        A set to keep track of objects that have already been visited during the dereferencing process, to prevent infinite recursion. By default, it is None, which means a new set will be created.

    Returns
    -------
    type
        The Python type that the reference points to.

    Raises
    ------
    ValueError
        If the reference cannot be dereferenced due to an invalid name or other reasons.

    Examples
    --------
    >>> from typing import ForwardRef
    >>> ref = ForwardRef('int')
    >>> dereference(ref)
    <class 'int'>

    Notes
    -----
    This function is useful for resolving forward references, which are typically 
    strings indicating a type that is not defined yet at the time of the reference's creation.

    See Also
    --------
    dref : Alias for `dereference`.
    '''
    if not isforwardref(ref) and isstr(ref):
        ref = ForwardRef(ref, is_argument=is_argument, module=module, is_class=is_class)

    recursive_guard = set()     if isnone(recursive_guard) else recursive_guard
    localsns        = locals()  if isnone(localsns)        else localsns
    globalsns       = globals() if isnone(globalsns)       else globalsns
    val = ref._evaluate(globalsns, localsns, recursive_guard)
    return val

@wraps(dereference, assigned = ('__module__',  '__doc__', '__annotations__', '__type_params__'))
def dref(
    ref: ForwardRef | str,
    is_argument: bool = False,
    module: str = None,
    *,
    is_class: bool = False,
    globalsns: dict = None, 
    localsns: dict = None, 
    recursive_guard: set = None
) -> type:
    '''Dereference a `ForwardRef` object.
    
    Returns
    -------
    type
        The dereferenced type.

    See Also
    --------
    dereference : Alias for `dref`.
    '''
    localsns  = locals()  if isnone(localsns)  else localsns
    globalsns = globals() if isnone(globalsns) else globalsns
    return dereference(ref, is_argument=is_argument, module=module, is_class=is_class, globalsns=globalsns, localsns=localsns, recursive_guard=recursive_guard)
