# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['register', 'regsyn', 'getglobs', 'globsyn']

# %% ../nbs/00_core.ipynb 4
import inspect
from typing import Optional, Callable, Set, Dict

# %% ../nbs/00_core.ipynb 7
def register(registry: Dict[str, Callable], fname: Optional[str] = None) -> Callable:
    '''Register an alias for a function
    
    Parameters
    ----------
    fname : Optional[str], default: `func.__name__`
        The name of the callable to register. Defaults to the decorated function's name.

    Returns
    -------
    Callable
        The decorated function
    '''
    def decorator(func: Callable) -> Callable:
        nonlocal registry, fname
        fname = fname or func.__name__
        registry |= {fname: func}
        return func
    return decorator

# %% ../nbs/00_core.ipynb 9
def regsyn(registry: Dict[str, Callable], synset: Optional[Set[str]] = None) -> Callable:
    '''Register a set of synonyms for a function
    
    Parameters
    ----------
    synset : Optional[Set[str]]
        The synonyms of the function to register.

    Returns
    -------
    Callable
        The function to be decorated
    '''    
    def decorator(func: Callable) -> Callable:
        nonlocal registry, synset
        synset = synset or {func.__name__}
        for syn in synset:
            register(registry, syn)(func)        
        return func
    return decorator


# %% ../nbs/00_core.ipynb 12
def getglobs(func: Callable, globs: Optional[Dict[str, Callable]] = None) -> Dict[str, Callable]:
    '''Get the global frame of a function.
    
    Parameters
    ----------
    func : Callable
        The function whose global frame is to be determined.
    globs : Optional[Dict[str, Callable]]
        An optional globals dictionary to start with.

    Returns
    -------
    Dict[str, Callable]
        The global frame where the function is defined.
    '''
    globs = globs or globals()
    frame = inspect.currentframe()
    try:
        while frame:
            globs = frame.f_globals
            if func.__name__ in globs:
                break
            frame = frame.f_back
    finally:
        del frame
    return globs


# %% ../nbs/00_core.ipynb 14
def globsyn(synset: Set[str], globs: Optional[Dict[str, Callable]] = None) -> Callable:
    '''Register a set of synonyms for a function to globals()
    
    Parameters
    ----------
    synset : Set[str]
        The synonyms of the function to register.

    Returns
    -------
    Callable
        The decorated function
    '''
    __globals = globals()
    def decorator(func: Callable) -> Callable:   
        nonlocal globs
        globs = globs or getattr(func, '__globals__', __globals)
        regsyn(registry=globs, synset=synset)(func)        
        return func
    return decorator

