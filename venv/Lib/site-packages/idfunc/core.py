# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['IDENTITY_SYNONYMS', 'passable', 'IdentityWarning', 'identity']

# %% ../nbs/00_core.ipynb 4
from typing import (Any, Tuple, Optional)
import warnings
from regsyn import globsyn

# %% ../nbs/00_core.ipynb 6
def passable(*args, **kwargs) -> (Tuple[Any, ...], dict):
    '''Returns all arguments and keyword arguments passed to it as they are.
    
    Parameters
    ----------
    *args : tuple, optional
        Any number of arguments, all of which are returned.        
    **kwargs : dict, optional
        Extra arguments, all of which are returned.

    Notes
    -----
    This function is useful for testing purposes.
    It also is handy as a default callable for methods which require a callable.

    Returns
    -------
    *args : Tuple[Any, ...]
    kwargs : dict

    Examples
    --------
    >>> *args, kwargs = passable(1,2,3, a=2)
    >>> args, kwargs
    >>> ([1, 2, 3], {'a': 2})
    '''
    return *args, kwargs

# %% ../nbs/00_core.ipynb 9
IDENTITY_SYNONYMS = {
    'echo', 'iden', 'idfn', 'noop', 'idfunc', 'nocall',
}

# %% ../nbs/00_core.ipynb 11
class IdentityWarning(UserWarning):
    '''A warning to be raised when an identity function is called with arguments.
    
    Attributes
    ----------
    source : Optional[str]
        The source where the warning originated.
    stcklvl : int
        The stack level for the warning.
    warn : bool
        Whether to actually issue a warning.
    n_args : int
        Number of positional arguments received.
    n_kwds : int
        Number of keyword arguments received.
    
    Methods
    -------
    makemsg()
        Generate the warning message.
    __call__()
        Issue the warning if applicable.
    '''
    
    source: Optional[str] = None
    stcklvl: int = 3

    def __init__(self, *args, **kwargs):
        super().__init__(*args)
        
        self.warn = kwargs.pop('warn', False)
        self.n_args = len(args)
        self.n_kwds = len(kwargs)
    
    def makemsg(self) -> str:
        '''Generate the warning message based on the number of arguments and keyword arguments.'''
        parts = []
        
        if self.n_args:
            parts.append(f'The identity function does not expect args but received `{self.n_args}` *args.')
        
        if self.n_kwds:
            parts.append(f'The identity function does not expect kwargs but received `{self.n_kwds}` **kwargs.')
        
        return ' '.join(parts)

    @property
    def dowarn(self) -> bool:
        '''Determine whether a warning should be issued.'''
        return self.warn and (self.n_args or self.n_kwds)

    def __call__(self) -> None:
        '''Issue the warning if applicable.'''
        if self.dowarn: 
            msg = self.makemsg()
            warnings.warn(msg, type(self), stacklevel=self.stcklvl, source=self.source)


# %% ../nbs/00_core.ipynb 13
@globsyn(IDENTITY_SYNONYMS)
def identity(x: Any, *args, **kwargs) -> Any:
    '''Identity function
    
    Parameters
    ----------
    x : Any
        Any object

    Other Parameters
    ----------------
    *args : tuple, optional
        Any number of arguments, all of which are ignored.        
    **kwargs : dict, optional
        Extra arguments, all of which are ignored.
    
    Returns
    -------
    Any

    Notes
    -----
    This function is useful for testing purposes.
    It also is handy as a default callable for methods which require a callable.

    See Also
    --------
    echo : Alias for identity
    iden : Alias for identity
    idfn : Alias for identity (IDentity FuNction)
    noop : Alias for identity (NO OPeration)
    idfunc : Alias for identity (IDentity FUNCtion)
    nocall : Alias for identity (NO CALLable)
    
    Examples
    --------
    >>> identity(1)
    1
    >>> identity('a')
    'a'
    >>> identity([1,2,3])
    [1, 2, 3]
    '''
    IdentityWarning(*args, **kwargs)()
    return x

# %% ../nbs/00_core.ipynb 14
__all__ = [
    'passable', 'identity', 'IdentityWarning', 
    'echo', 'iden', 'idfn', 'noop', 'idfunc', 'nocall'
]
