# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_imod.ipynb.

# %% auto 0
__all__ = ['imod', 'itry']

# %% ../nbs/03_imod.ipynb 5
from importlib import import_module
from functools import wraps

# %% ../nbs/03_imod.ipynb 7
from types import BuiltinFunctionType, FunctionType, MethodType
from typing import (Union, Tuple, Optional)

# %% ../nbs/03_imod.ipynb 9
from nlit import CLS

# %% ../nbs/03_imod.ipynb 11
from .atyp import T, Types, Namespace, ImportedAsset
from .util import setsig, newtype

# %% ../nbs/03_imod.ipynb 14
def imod(
    name: str, 
    attr: Optional[str] = None,
    bases: Union[Types, type] = tuple(), 
    namespace: Namespace = dict(),
    default: Optional[T] = None,
    **kwargs
) -> ImportedAsset:
    '''Import a specific attribute from a module or return a default value if import fails.

    Parameters
    ----------
    name : str
        The name of the module to import from.
        
    attr : Optional[str]
        The name of the attribute to import from the module, defaults to None.
        
    bases : Union[Types, type]
        Base classes for creating a new type if import fails and default is None.
        
    namespace : dict
        A namespace dictionary for creating a new type.
        
    default : Optional[type]
        A default value to return if import fails.
        
    **kwargs
        Additional keyword arguments passed to tnew.

    Returns
    -------
    Optional[type]
        The imported attribute, or the default value, or a new type created using newtype.
    '''
    cls = kwargs.pop(CLS, None)
    if not isinstance(bases, tuple): 
        bases = (bases, )
    
    try: 
        mod = import_module(name)
        attr = getattr(mod, attr) if attr is not None else mod
        
        if isinstance(attr, (FunctionType, MethodType, BuiltinFunctionType, )):
            
            @wraps(attr)
            def wrapper(*args, **kwargs): 
                return attr(*args, **kwargs)
            
            wrapper = setsig(wrapper, attr)
            return wrapper
        
        else: 
            return attr
    
    except (ImportError, AttributeError):
        if default is not None: 
            return default
        try: 
            return namespace.get(attr, newtype(attr, bases, namespace, cls=cls, **kwargs))
        except TypeError: 
            return default

# %% ../nbs/03_imod.ipynb 16
def itry(
    name: str, 
    *attrs: str, 
    bases: Union[Types, type] = tuple(), 
    namespace: Namespace = dict(), 
    **kwargs
) -> Tuple[ImportedAsset, ...]:
    '''Try to import multiple attributes from a module, returning a tuple of results.

    Parameters
    ----------
    name : str
        The name of the module to import from.

    attrs : str
        Variable number of attribute names to import from the module.

    bases : Union[Tuple[type, ...], type]
        Base classes for creating new types if import fails.

    namespace : dict
        A namespace dictionary for creating new types.

    **kwargs
        Additional keyword arguments passed to imod.

    Returns
    -------
    Tuple[Optional[type], ...]
        A tuple of the imported attributes or default values.
    '''
    return tuple(imod(name, attr, bases, namespace, **kwargs) for attr in attrs)
