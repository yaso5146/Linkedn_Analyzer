# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_atyp.ipynb.

# %% auto 0
__all__ = ['T', 'O', 'G', 'P', 'Types', 'GuardLike', 'Namespace', 'ImportedAsset']

# %% ../nbs/01_atyp.ipynb 5
#| export

# %% ../nbs/01_atyp.ipynb 7
from types import (ModuleType, FunctionType, SimpleNamespace, BuiltinFunctionType, BuiltinMethodType)
from typing import (
    Type, Union, Dict, Tuple, Callable, 
    TypeVar, ParamSpec, TypeGuard, TypeAlias
)

# %% ../nbs/01_atyp.ipynb 9
T = TypeVar('T')
'''Generic type variable that can represent any type.''';

O = TypeVar('O')
'''Generic type variable that can represent any object.''';

G = TypeVar('G')
'''Generic type variable that can represent any Graph.''';

P = ParamSpec('P')
'''Parameter specification type variable, capturing the type of function parameters.''';

Types: TypeAlias = Tuple[Type, ...]
'''TypeAlias for a tuple of types, representing a collection of type objects.''';

GuardLike: TypeAlias = Callable[[O], TypeGuard[T]]
'''TypeAlias for a callable that takes an object of type O and returns a TypeGuard for type T.''';

Namespace: TypeAlias = Union[Dict[str, T], SimpleNamespace]
'''TypeAlias for a union of a dictionary and a `SimpleNamespace` object.''';

ImportedAsset: TypeAlias = Union[T, Type, FunctionType, BuiltinFunctionType, BuiltinMethodType, ModuleType]
'''TypeAlias for a union of a function, a builtin function, a builtin method, and a module object.''';
